 
do opposite(norte,sul)
do opposite(leste,oeste)
do opposite(sul,norte)
do opposite(oeste,leste)

do direction(norte)
do direction(sul)
do direction(oeste)
do direction(leste)


  
do room(comando)
do room(corredor_norte)
do room(corredor_centro)
do room(corredor_sul)
do room(gabine_comandante)
do room(gabine_auxiliar)
do room(camara)
do room(exterior_norte)
do room(exterior_centro)
do room(exterior_sul)
do room(reator)

 
do croute(corredor_norte  , norte , comando)
do croute(corredor_centro  , norte , corredor_norte)
do croute(corredor_sul  , norte , corredor_centro)
do croute(reator  , norte , corredor_sul)

 
do croute(exterior_sul , norte , exterior_centro )
do croute(exterior_centro , norte , exterior_norte )

 
do croute(corredor_centro , oeste , gabine_auxiliar )
do croute(corredor_sul , oeste , camara )
do croute(corredor_norte , oeste , gabine_comandante )

 
do croute(camara , oeste , exterior_sul )

var $location as gabine_auxiliar

var $location_table as [[chave, gabine_auxiliar ], [botao, reator ] ]
 
do repr(reator)  as "a sala do reator"
do repr(comando)  as "a sala de comando"
do repr(camara)  as "a camara de descompressao"
do repr(gabine_comandante)  as "a gabine do comandante"
do repr(gabine_auxiliar)  as "a gabine do auxiliar de comando"


do repr(corredor_norte)  as "o corredor da proa"
do repr(corredor_centro)  as "o corredor central"
do repr(corredor_sul)  as "o corredor da popa"

do repr(exterior_norte)  as "o exterior da proa"
do repr(exterior_centro)  as "o exterior centro"
do repr(exterior_sul)  as "o exterior da popa "


do route($x, $d, $y)  as   opposite($d,$d_opp), croute($y, $d_opp, $x )
do route($x, $d, $y)  as   croute($x, $d , $y )
do saida($room) as route($room, $d, _) , $d

 do saidas($room) as $y = findall($x, $x = saida( $room ) ), $y 

do move($dir) => write("nao eh possivel ir para $dir\n")
do move($dir) => route($location, $dir, $dst) , $location := $dst , $s = expand("entrou em [$location] \n"), junta_artigos($s,$sx), write($sx)

do action_move($d) => move($d),endTurn()

unless repr($x) as $x
 
unless junta_artigos($s,$sx ) as $s = $sx 
do junta_artigos($s,$sx) as match($s,"$x em o $y"), junta_artigos($x,$xx),junta_artigos($y,$yy),   $sx = expand("$xx no $yy") 
do junta_artigos($s,$sx) as match($s,"$x em a $y"), junta_artigos($x,$xx),junta_artigos($y,$yy),   $sx = expand("$xx na $yy") 


do uu($Z , $r) as HT( $a,$t, $Z ),  member($a,$t ) , write("> $t "), u( $t, $rx ) , $rx = $r
do uu($Z , $r) as HT( $a,$t, $Z ), not( member($a,$t ) ),write("< $t "), u( $t, $rx ) , append([$a] , $rx , $r)

do u($Z , $r) as HT( $a,$t, $Z ),u( $t, $rx ), if( member($a,$t ) ) { write("< $a "), $rx = $r } else {write("> $a "),  append([$a] , $rx , $r) }

unless u($x, $y) as $x = $y


do qmain() as  $y = findall($x, route( $x , _, _ ) ) , u($y,$salas) , $salas
do qmain() as  route( $x,$d,$y ) ,[$x,$d,$y ]
do qmain() as $x = [1,2,3,5,4,5,3  ] , u($x,$r), $r
do qmain() as if(true) write(" x "), write(" x2 ")  else write(" y "),write(" z ")
do qmain() as action_move(leste), repeat($runnig), $dout = saidas($location), random_member($d,$dout),  action_move($d)   


do class(thing) 
do class(container,thing) 
do class(button,thing) 
do class(button,device) 
do class(pulsador, button)

do is($x,$c) => class($x,$ci) , class($ci,$c) 
do is($x,$c) => class($x,$c) 

do delete([], _ , [] ) 
do delete($x, $e , $xs ) =>  HT($h,$t,$x ) ,  if ( $e == $h ) {  delete( $t, $e, $xs)  } else {   delete( $t, $e, $ts) ,append([$h], $ts, $xs )   }



do qmain() as action_move(leste),action_move(sul),action_move(sul)

var $runnig as  true 
var $protecao as false
unless  endTurn() as true 
do endTurn() as $location == comando ,   { $protecao == false ,  $protecao := true } 
do endTurn() as $location == reator ,$runnig  := false ,  if( $protecao == false ) { write("slow die \n")   } else { write("reator consertado  \n") }


do fixed(panel)
do location($x, $where ) as  member($c , $location_table ) ,is_list($c) ,HT($x,$t,$c), head( $where,$t)
do set_location($x, $where ) as delete($location_table, [$x,_] , $Lc ), append( [[$x,$where]] ,$Lc , $L  ) ,   $location_table := $L 

do in_possesion($x) as location($x, player)

do taking($x) as write("unable to taken\n")
do taking($x) as location($x,$location), set_location($x,player ) , write("taken\n")
do taking($x) as in_possesion($x), write("ja possui\n")  
do taking($x) as fixed($x), write("cant take, is fixed \n") 

do action_get($x)  => taking($x),endTurn()

understand "norte" as  action_move(norte)
understand "sul" as  action_move(sul)
understand "leste" as  action_move(leste)
understand "oeste" as  action_move(oeste)

understand "pega $x" as atom_string($a,$x), action_get($a)

unless cmd($s) as write("nao entendi \n")
do cmd($s) as parse($s)

do main() as  cmd("pega botao") 
do main() as  cmd("pega chave")  
do main() as  location($x,$c) , [$x , $c]
do main() as  cmd("pega chave") 
do main() as  location($x,$c) ,  [$x , $c]